import asyncio
import logging
from datetime import datetime
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F, types
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# -------------------------------
# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env
# -------------------------------
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
TEACHER_ID = int(os.getenv("TEACHER_ID"))
GROUP_ID = int(os.getenv("GROUP_ID"))

# -------------------------------
# –õ–æ–≥—É–≤–∞–Ω–Ω—è
# -------------------------------
logging.basicConfig(level=logging.INFO)

# -------------------------------
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
# -------------------------------
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# -------------------------------
# –°–ø–∏—Å–æ–∫ —É—á–Ω—ñ–≤
# -------------------------------
students = [
    "–í—ñ–ª—å—á–∏–Ω—Å—å–∫–∞ –ê–Ω–∞—Å—Ç–∞—Å—ñ—è",
    "–í–æ–ª–∫–æ–≤ –ë–æ–≥–¥–∞–Ω",
    "–ì–æ–ª–æ—Å–Ω–∞ –ö–∞—Ç–µ—Ä–∏–Ω–∞",
    "–ö–∞—Ä–æ–ª–µ—Ü—å –ù–∞—Ç–∞–ª—ñ—è",
    "–ö–æ–ª–æ—à–≤–∞ –ê–Ω–¥—Ä—ñ–π",
    "–ö–æ—Ä–ª–æ—Ç—è–Ω—É –ê–Ω—Ç–æ–Ω",
    "–ö–æ—Ä–Ω—ñ–π—á—É–∫ –î–∞–Ω—ñ—ó–ª",
    "–õ—ñ—Å–Ω—è–∫ –ú–∞–∫—Å–∏–º",
    "–ú–∞—Ä—Ç–æ–≤–∏—Ü—å–∫–∞ –ü–æ–ª—ñ–Ω–∞",
    "–ú–µ–ª–µ—à–∫–æ –°–æ—Ñ—ñ—è",
    "–ù–∞—Ç–∞–ª—å—á—É–∫ –ú–∞–∫—Å–∏–º",
    "–ù–æ–≤—ñ–∫–æ–≤–∞ –ê–ª—ñ–Ω–∞",
    "–†–∞—á–∫–æ–≤—Å—å–∫–∞ –ú–∞—Ä–∏–Ω–∞",
    "–°–∞–≤—á–µ–Ω–∫–æ –ê–Ω–∞—Å—Ç–∞—Å—ñ—è",
    "–§–æ–º–µ–Ω–∫–æ –°–≤—ñ—Ç–ª–∞–Ω–∞",
    "–•—ñ–º—ñ—á–µ–Ω–∫–æ –ù—ñ–∫—ñ—Ç–∞",
    "–®–∞–≤—Ä–∞–Ω—Å—å–∫–∞ –Ø–Ω–∞",
    "–Ø—â—É–∫ –ê–Ω–Ω–∞",
]

attendance = {}   # {username/full_name: {"status": "‚úÖ/‚ùå", "reason": "–ü–ü/–•–í/–ë–ü"} }
queue = students.copy()  # —á–µ—Ä–≥–∞ –¥–ª—è —á–µ—Ä–≥—É–≤–∞–Ω–Ω—è
current_duty = None

# -------------------------------
# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
# -------------------------------
def presence_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.button(text="‚úÖ –ü—Ä–∏—Å—É—Ç–Ω—ñ–π")
    kb.button(text="‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π")
    return kb.as_markup(resize_keyboard=True)

def absence_reason_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.button(text="–ü–ü")
    kb.button(text="–•–í")
    kb.button(text="–ë–ü")
    return kb.as_markup(resize_keyboard=True)

def duty_done_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.button(text="‚úÖ –í–∏–∫–æ–Ω–∞–≤")
    kb.button(text="‚ùå –ù–µ –≤–∏–∫–æ–Ω–∞–≤")
    return kb.as_markup(resize_keyboard=True)

# -------------------------------
# –õ–æ–≥—ñ–∫–∞ –±–æ—Ç–∞
# -------------------------------
async def ask_attendance():
    await bot.send_message(GROUP_ID, "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! –í—ñ–¥–º—ñ—Ç—å—Ç–µ —Å–≤–æ—é –ø—Ä–∏—Å—É—Ç–Ω—ñ—Å—Ç—å üëá", reply_markup=presence_keyboard())

async def finalize_attendance():
    global current_duty
    present = [name for name, data in attendance.items() if data["status"] == "‚úÖ"]

    if not present:
        await bot.send_message(TEACHER_ID, "‚ùå –ù—ñ—Ö—Ç–æ –Ω–µ –≤—ñ–¥–º—ñ—Ç–∏–≤—Å—è –ø—Ä–∏—Å—É—Ç–Ω—ñ–º!")
        return

    # –≤–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à–æ–≥–æ –∑ —á–µ—Ä–≥–∏, —Ö—Ç–æ –ø—Ä–∏—Å—É—Ç–Ω—ñ–π
    for name in queue:
        if name in present:
            current_duty = name
            queue.remove(name)
            queue.append(name)
            break

    # —Ñ–æ—Ä–º—É—î–º–æ –∑–≤—ñ—Ç
    text = f"üìã –ü—Ä–∏—Å—É—Ç–Ω—ñ—Å—Ç—å –Ω–∞ {datetime.now().date()}:\n\n"
    for name in students:
        if name in attendance:
            st = attendance[name]["status"]
            reason = attendance[name].get("reason", "")
            duty = "üü¢ (—á–µ—Ä–≥–æ–≤–∏–π)" if name == current_duty else ""
            text += f"{st} {name} {reason} {duty}\n"
        else:
            text += f"‚ùå {name} (–Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤)\n"

    # –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≤—á–∏—Ç–µ–ª—é —Ç–∞ –≥—Ä—É–ø—ñ
    await bot.send_message(TEACHER_ID, text)
    await bot.send_message(GROUP_ID, text)

async def ask_duty_done():
    if current_duty:
        await bot.send_message(GROUP_ID, f"{current_duty}, —á–∏ –≤–∏–∫–æ–Ω–∞–≤ —Ç–∏ –æ–±–æ–≤‚Äô—è–∑–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?", reply_markup=duty_done_keyboard())

# -------------------------------
# –•–µ–Ω–¥–ª–µ—Ä–∏
# -------------------------------
@dp.message(F.text == "‚úÖ –ü—Ä–∏—Å—É—Ç–Ω—ñ–π")
async def mark_present(message: types.Message):
    name = message.from_user.full_name
    attendance[name] = {"status": "‚úÖ"}
    await message.answer("–í—ñ–¥–º—ñ—á–µ–Ω–æ: –ø—Ä–∏—Å—É—Ç–Ω—ñ–π", reply_markup=types.ReplyKeyboardRemove())

@dp.message(F.text == "‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π")
async def ask_reason(message: types.Message):
    await message.answer("–í–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ:", reply_markup=absence_reason_keyboard())

@dp.message(F.text.in_(["–ü–ü", "–•–í", "–ë–ü"]))
async def mark_absent(message: types.Message):
    name = message.from_user.full_name
    attendance[name] = {"status": "‚ùå", "reason": f"({message.text})"}
    await message.answer("–í—ñ–¥–º—ñ—á–µ–Ω–æ: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π", reply_markup=types.ReplyKeyboardRemove())

@dp.message(F.text.in_(["‚úÖ –í–∏–∫–æ–Ω–∞–≤", "‚ùå –ù–µ –≤–∏–∫–æ–Ω–∞–≤"]))
async def duty_status(message: types.Message):
    status = "–í–∏–∫–æ–Ω–∞–≤" if "‚úÖ" in message.text else "–ù–µ –≤–∏–∫–æ–Ω–∞–≤"
    await bot.send_message(TEACHER_ID, f"üìå –ß–µ—Ä–≥–æ–≤–∏–π {current_duty} ‚Äî {status}")
    await message.answer("–î—è–∫—É—é, —Ç–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–ø–∏—Å–∞–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())

# -------------------------------
# –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–≤–¥–∞–Ω—å
# -------------------------------
async def on_startup():
    scheduler.add_job(ask_attendance, "cron", hour=8, minute=0)
    scheduler.add_job(finalize_attendance, "cron", hour=8, minute=30)
    scheduler.add_job(ask_duty_done, "cron", hour=15, minute=0)
    scheduler.start()

# -------------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# -------------------------------
async def main():
    await on_startup()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
